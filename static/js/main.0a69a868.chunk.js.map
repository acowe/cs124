{"version":3,"sources":["logo.svg","Task.js","TaskList.js","Bottom.js","App.js","reportWebVitals.js","InMemoryApp.js","index.js"],"names":["Task","props","console","log","id","name","completed","toString","type","value","onChange","e","handleCheckChange","target","checked","htmlFor","className","TaskList","data","length","listTasks","map","t","Bottom","onClick","onItemDeleted","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InMemoryApp","useState","initialData","setData","itemIDArr","retArr","i","push","getCompleted","filter","item","includes","check","task","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAAe,I,oBCeAA,MAZf,SAAcC,GAEV,OADAC,QAAQC,IAAI,CAACF,EAAMG,GAAGH,EAAMI,KAAKJ,EAAMK,UAAUC,aAC1C,sBAAKH,GAAI,KAAKH,EAAMG,GAApB,UACH,uBAAOI,KAAK,WAAWJ,GAAI,KAAKH,EAAMG,GAC/BC,KAAMJ,EAAMI,KACZI,MAAOR,EAAMI,KACbK,SAAU,SAACC,GAAD,OAAKV,EAAMW,kBAAkBD,EAAEE,OAAOT,GAAGO,EAAEE,OAAOC,YACnE,wBAAOC,QAASd,EAAMI,KAAtB,cAA8BJ,EAAMI,KAApC,OACA,wBAAQG,KAAK,SAASQ,UAAU,OAAhC,wB,OCKOC,MAZf,SAAkBhB,GACd,GAA0B,IAAtBA,EAAMiB,KAAKC,OACX,OAAO,kDAGP,IAAMC,EAAYnB,EAAMiB,KAAKG,KAAI,SAACC,GAAD,OAC7B,cAAC,EAAD,CAAMV,kBAAmBX,EAAMW,kBAAmBR,GAAIkB,EAAElB,GAAIC,KAAMiB,EAAEjB,KAAMC,UAAWgB,EAAEhB,eAC3F,OAAO,qBAAKF,GAAI,WAAT,SACFgB,K,OCEEG,MAXf,SAAgBtB,GACZ,OAAO,sBAAKe,UAAU,SAAf,sBACM,uBACT,uBAAOR,KAAO,OAAOJ,GAAK,UAAUC,KAAK,YACzC,wBAAQG,KAAK,SAASJ,GAAG,SAAzB,2BAHG,IAGsD,uBACzD,wBAAQI,KAAK,SAASJ,GAAG,OAAzB,oCACA,wBAAQI,KAAK,SAASJ,GAAG,QAAQoB,QAAS,SAACb,GAAD,OAAOV,EAAMwB,iBAAvD,wCCOOC,MAVf,SAAazB,GACX,OACE,sBAAKe,UAAU,MAAf,UACE,sDACE,cAAC,EAAD,CAAUJ,kBAAmBX,EAAMW,kBAAmBM,KAAMjB,EAAMiB,OAClE,cAAC,EAAD,CAAQO,cAAexB,EAAMwB,oBCCtBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iCCiCCQ,MApCf,SAAqBnC,GACjB,MAAuBoC,mBAASpC,EAAMqC,aAAtC,mBAAOpB,EAAP,KAAYqB,EAAZ,KAsBA,OAAO,8BACH,cAAC,EAAD,CAAKd,cAXT,WACI,IAAMe,EAXV,WAEI,IADA,IAAIC,EAAS,GACJC,EAAE,EAAGA,EAAGxB,EAAKC,OAAOuB,IACtBxB,EAAKwB,GAAGpC,WACPmC,EAAOE,KAAKzB,EAAKwB,GAAGtC,IAG5B,OAAOqC,EAIWG,GAClBL,EAAQrB,EAAK2B,QAAO,SAAAC,GAAI,OAAKN,EAAUO,SAASD,EAAK1C,SASbQ,kBAAmB,SAACR,EAAG4C,GAAJ,OAAYT,EAAQ,YAAIrB,GAAMG,KAAI,SAAA4B,GACzF,OAAG7C,EAAG2C,SAASE,EAAK7C,IACT,2BACA6C,GADP,IAEI3C,UAAW0C,IAGPC,OAAU/B,KAAMA,OC1BxCgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAad,YALG,CAAC,CAAClC,GAAI,GAAIC,KAAK,WAAYC,WAAU,GAAO,CAACF,GAAI,GAAIC,KAAK,WAAYC,WAAU,GAC/E,CAACF,GAAI,GAAIC,KAAK,cAAeC,WAAU,QAM1D+C,SAASC,eAAe,SAM1B3B,M","file":"static/js/main.0a69a868.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import App from \"./App\";\nimport './Task.css';\n\nfunction Task(props){\n    console.log([props.id,props.name,props.completed.toString()])\n    return <div id={\"id\"+props.id}>\n        <input type=\"checkbox\" id={\"id\"+props.id}\n               name={props.name}\n               value={props.name}\n               onChange={(e)=>props.handleCheckChange(e.target.id,e.target.checked)}/>\n        <label htmlFor={props.name}> {props.name} </label>\n        <button type=\"button\" className=\"edit\"> edit </button>\n    </div>\n}\n\nexport default Task;","import Task from './Task.js'\nimport App from \"./App\";\nimport './TaskList.css';\n\nfunction TaskList(props){\n    if (props.data.length === 0){\n        return <div> Nothing to do!</div>\n    }\n    else{\n        const listTasks = props.data.map((t) =>\n            <Task handleCheckChange={props.handleCheckChange} id={t.id} name={t.name} completed={t.completed}/>);\n        return <div id={\"TaskList\"}>\n            {listTasks}\n        </div>\n    }\n}\nexport default TaskList;\n\n","import App from \"./App\";\nimport './Bottom.css';\n\nfunction Bottom(props){\n    return <div className=\"bottom\">\n        New task:<br/>\n        <input type = \"text\" id = \"newTask\" name=\"newTask\"/>\n        <button type=\"button\" id=\"create\"> Create Task </button> <br/>\n        <button type=\"button\" id=\"hide\"> Hide Completed Tasks </button>\n        <button type=\"button\" id=\"clear\" onClick={(e) => props.onItemDeleted()} >\n            Clear Completed Tasks </button>\n    </div>\n}\n\nexport default Bottom;","import logo from './logo.svg';\nimport './App.css';\nimport TaskList from './TaskList.js';\nimport Bottom from './Bottom.js';\n\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <h1>List of Things to Do</h1>\n        <TaskList handleCheckChange={props.handleCheckChange} data={props.data}/>\n        <Bottom onItemDeleted={props.onItemDeleted}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App.js';\nimport {useState} from \"react\";\nimport {getQueriesForElement} from \"@testing-library/react\";\n\nfunction InMemoryApp(props) {\n    const [data,setData] = useState(props.initialData)\n\n    function getCompleted(){\n        let retArr = [];\n        for (let i=0; i< data.length;i++){\n            if(data[i].completed){\n                retArr.push(data[i].id);\n            }\n        }\n        return retArr;\n    }\n\n    function handleItemsDeleted(){\n        const itemIDArr = getCompleted();\n        setData(data.filter(item => !itemIDArr.includes(item.id)));\n    }\n\n    function newData(id,check){\n\n    }\n\n\n    return <div>\n        <App onItemDeleted={handleItemsDeleted} handleCheckChange={(id,check)=>setData([...data].map(task =>{\n            if(id.includes(task.id)) {\n                return {\n                    ...task,\n                    completed: check\n                }\n            }\n            else return task;}))} data={data} />\n    </div>\n}\n\n/*setData(setDataHelper(id,check))*/\nexport default InMemoryApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport InMemoryApp from \"./InMemoryApp\";\nconst initialData = [{id: 52, name:\"call mom\", completed:false},{id: 53, name:\"eat Book\", completed:false},\n                     {id: 54, name:\"order lunch\", completed:false}];\n\nReactDOM.render(\n  <React.StrictMode>\n    <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}