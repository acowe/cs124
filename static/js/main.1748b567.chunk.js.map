{"version":3,"sources":["logo.svg","Task.js","TaskList.js","Top.js","Bottom.js","App.js","reportWebVitals.js","inCloudApp.js","index.js"],"names":["Task","props","edit","editState","show","toDelete","useState","task_name","editInput","setEditInput","priority","console","log","task_id","id","className","completed","toString","type","name","value","checked","onChange","e","handleTaskFieldChanged","target","htmlFor","event","handleConfEdit2","onClick","handleEditClick","onKeyPress","key","handleConfEdit","TaskList","taskToBeEdit","setTaskToBeEdit","text","priorityNum","tasks","length","listTasks","map","t","includes","showCompletedTask","taskID","Top","currentList","setTaskListInput","showSort","initial","selectList","taskLists","l","list_id","list_name","listId","handleTaskListSelect","sortVal","setSort","Bottom","listNameInput","setListNameInput","taskNameInput","setTaskNameInput","taskPriorityInput","setTaskPriorityInput","showTaskStuff","onCreateListClick","handleTaskListAdded","role","onCreateTaskClick","handleTaskAdded","onCreateTaskEnter","handleHideCompleted","handleTasksDeleted","handleTaskListDeleted","App","loading","sortPriority","sortDirection","deleteAllTasks","taskCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","collectionName","InCloudApp","query","collection","useCollection","setCurrentList","setSortVal","setSortPriority","setSortDirection","query_2","doc","orderBy","task_value","task_loading","setShowCompletedTask","setToDelete","maxMessage","setMaxMessage","orderNum","setOrderNum","listID","get","querySnapshot","forEach","delete","docs","data","taskLoading","listNameText","newListId","generateUniqueID","set","newTaskId","place_order","taskId","field","update","listToBeDeleted","completedIDs","retArr","i","push","getCompleted","sortPref","ReactDOM","render","StrictMode","initialData","document","getElementById"],"mappings":"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","file":"static/js/main.1748b567.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import App from \"./App\";\nimport './Task.css';\nimport {useState} from \"react\";\n\n\n\nfunction Task(props){\n    const edit = props.editState;\n    const show = props.show;\n    const toDelete = props.toDelete;\n    const[editInput, setEditInput] = useState(props.task_name);\n    const[editPriority, setEditPriority] = useState(props.priority);\n\n    console.log(props.task_id)\n\n\n    if(edit === 0){\n        return <div id={\"task\"+props.task_id} className={\"comp\"+props.completed.toString()+\"show\"+show.toString()}>\n            <input type=\"checkbox\" id={props.task_id}\n                   name={\"cb\"+props.task_name}\n                   aria-label={\"checkbox for \" + props.task_name}\n                   value={props.task_name}\n                   checked={props.completed && !toDelete}\n                   onChange={(e)=>props.handleTaskFieldChanged(e.target.id, \"completed\", e.target.checked)}/>\n            <label htmlFor={props.task_name} aria-label={props.task_name + \" completed: \" + props.completed.toString()}\n                   className=\"taskLabel\"> {props.task_name} </label>\n            <select name=\"priorityLvl\" id=\"priorityLvl\" value={props.priority}\n                    aria-label = \"Set priority for this task\"\n                    onChange={(event)=>props.handleConfEdit2(props.task_id,event.target.value)}>\n                <option value=\"0\"></option>\n                <option value=\"1\">!</option>\n                <option value=\"2\">!!</option>\n                <option value=\"3\">!!!</option>\n            </select>\n            <button type=\"button\" id={\"ed\"+props.task_id}\n                    aria-label=\"edit task\"\n                    onClick={(e)=>props.handleEditClick(e.target.id)} className=\"edit\">\n                edit </button>\n        </div>\n    }\n    else if(edit === 1){\n        return <div id={\"task\"+props.task_id} className={\"comp\"+props.completed.toString()+\"show\"+show.toString()}>\n            <input type=\"checkbox\" id={props.task_id}\n                   name={props.task_name}\n                   value={props.task_name}\n                   checked={props.completed}/>\n            <input  type = \"text\" id = \"newTask\" name=\"newTask\" value={editInput}\n                    onChange={(event)=>setEditInput(event.target.value)}\n                    onKeyPress={(e)=>\n                    {if(e.key ===\"Enter\")props.handleConfEdit(props.task_id,editInput)}}/>\n            <button type=\"button\" id={props.task_id} onClick={(e)=>props.handleConfEdit(e.target.id,editInput)}\n                    className=\"edit\"> confirm edit </button>\n        </div>\n    }\n\n    else{\n        return <div id={props.task_id} className={\"comp\"+props.completed.toString()+\"show\"+show.toString()}>\n            <input type=\"checkbox\" id={props.task_id}\n                   name={\"cb\"+props.task_name}\n                   value={props.task_name}\n                   checked={props.completed}/>\n            <label htmlFor={props.task_name}> {props.task_name} </label>\n        </div>\n    }\n\n}\n\n/*props.handleTaskFieldChanged(e.target.id, \"completed\", e.target.checked)*/\nexport default Task;","import Task from './Task.js'\nimport App from \"./App\";\nimport {useState} from \"react\";\nimport './TaskList.css';\n\nfunction TaskList(props){\n    const[taskToBeEdit, setTaskToBeEdit] = useState(-1);\n\n\n    function handleConfEdit(id,text){\n        setTaskToBeEdit(-1);\n        props.handleTaskFieldChanged(id,\"task_name\",text);\n    }\n\n    function handleConfEdit2(id,priorityNum){\n        props.handleTaskFieldChanged(id,\"priority\",priorityNum);\n    }\n\n\n    if (props.tasks.length === 0){\n        return <div> Nothing to do!</div>\n    }\n    else{\n        if(taskToBeEdit !== -1){\n\n            const listTasks = props.tasks.map((t) =>\n            {if (taskToBeEdit.includes(t.task_id)) {\n                return <Task className=\"task\"\n                             handleTaskFieldChanged={props.handleTaskFieldChanged}\n                             task_id={t.task_id} task_name={t.task_name} completed={t.completed} priority={t.priority}\n                             editState={1} show={props.showCompletedTask}\n                             handleConfEdit={handleConfEdit}/>;\n            }\n            else {\n                return <Task handleTaskFieldChanged={props.handleTaskFieldChanged} task_id={t.task_id}\n                             task_name={t.task_name}\n                             completed={t.completed}\n                             priority={t.priority}\n                             editState={2} show={props.showCompletedTask}/>;\n            }\n            })\n            return <div id={\"TaskList\"}> {listTasks} </div>\n        }\n\n        else{\n            const listTasks = props.tasks.map((t) =>\n                <Task handleTaskFieldChanged={props.handleTaskFieldChanged}\n                    /*handleEditClick={(taskID)=>setTaskToBeEdit(taskID)}*/\n                      task_id={t.task_id} task_name={t.task_name} completed={t.completed} priority={t.priority}\n                      editState={0} show={props.showCompletedTask} toDelete={props.toDelete}\n                      handleEditClick={(taskID)=>setTaskToBeEdit(taskID)}\n                      handleConfEdit2={handleConfEdit2}/>);\n            return <div id={\"TaskList\"}> {listTasks} </div>\n        }\n\n    }\n}\nexport default TaskList;\n\n","import App from \"./App\";\nimport {useState} from \"react\";\nimport './Top.css';\n\n\nfunction Top(props) {\n    const[taskListInput, setTaskListInput] = useState(props.currentList);\n    const showSort = !(props.initial);\n\n    console.log(\"showSort\" + showSort.toString());\n\n    const selectList = props.taskLists.map((l) => {\n        return <option value={l.list_id}> {l.list_name}</option>\n    });\n\n    function onClickSelectList(listId){\n        props.handleTaskListSelect(listId);\n        setTaskListInput(listId);\n\n    }\n\n    return <div className=\"top\">\n        <span className=\"listSelection\"\n              aria-label=\"List Selection Menu\">\n        <label htmlFor=\"listSelect\"> List:</label>\n        <select name=\"listSelect\"\n                id=\"listSelect\" value={props.currentList}\n                aria-label = \"List Selection Menu\"\n                onChange={(event) => onClickSelectList(event.target.value)}>\n            <option value={\"wow\"}> Select list </option>\n            {selectList}\n        </select>\n        </span>\n        <br/>\n        <div className={\"showSort\" + showSort.toString()}>\n            <label htmlFor=\"sortWithSelect\" aria-label = \"Sort by Menu\">Sort by:</label>\n            <select name=\"sortWithSelect\" aria-label = \"Sort by Menu\" id=\"sortWithSelect\" value={props.sortVal}\n                    onChange={(event)=>props.setSort(event.target.value)}>\n                <option value=\"default\">default</option>\n                <option value=\"priorityAsc\">Lowest to Highest priority</option>\n                <option value=\"priorityDesc\">Highest to lowest priority</option>\n            </select>\n        </div>\n\n    </div>\n}\n\nexport default Top;\n","import App from \"./App\";\nimport './Bottom.css';\nimport {useState} from \"react\";\n\nfunction Bottom(props){\n    const[listNameInput, setListNameInput] = useState(\"\");\n    const[taskNameInput, setTaskNameInput] = useState(\"\");\n    const[taskPriorityInput, setTaskPriorityInput] = useState(\"0\");\n    const showTaskStuff = !(props.initial);\n\n\n    function onCreateListClick(){\n        props.handleTaskListAdded(listNameInput);\n        setListNameInput(\"\");\n        if(listNameInput === \"\"){\n            return <p id=\"taskAddMessage\" role=\"alert\">\n                No list added due to blank entry, please try again.\n            </p>\n        }\n        else{\n            return <p id=\"taskAddMessage\" role=\"alert\">\n                List {listNameInput} successfully added!\n            </p>\n        }\n\n    }\n\n    function onCreateTaskClick(){\n        props.handleTaskAdded(taskNameInput,taskPriorityInput);\n        setTaskNameInput(\"\");\n        setTaskPriorityInput(\"0\");\n    }\n\n    function onCreateListEnter(key){\n        if (key === 'Enter') {\n            props.handleTaskListAdded(listNameInput);\n            setListNameInput(\"\");\n        }\n    }\n\n    function onCreateTaskEnter(key){\n        if (key === 'Enter'){\n            props.handleTaskAdded(taskNameInput,taskPriorityInput);\n            setTaskNameInput(\"\");\n            setTaskPriorityInput(\"0\");\n        }\n    }\n\n\n    if (props.showCompletedTask){\n        return <div className=\"bottom\">\n            <div className={\"showTask\" + showTaskStuff.toString()}>\n                <div className=\"taskStuff_row1\">\n                <label htmlFor=\"newTask\"> New task:</label><br/>\n                <input  type = \"text\" id = \"newTask\" name=\"newTask\"\n                        aria-label = \"text box for new task entry\"\n                        onKeyPress={(e)=>onCreateTaskEnter(e.key)}\n                        onChange={(event)=>setTaskNameInput(event.target.value)}\n                        value={taskNameInput}/>\n\n                <select name=\"priorityLvl\" id=\"priorityLvl\" aria-label = \"Set priority for new task\"\n                        onChange={(event)=>setTaskPriorityInput(event.target.value)}>\n                    <option value=\"0\">Select priority</option>\n                    <option value=\"0\">None</option>\n                    <option value=\"1\">Low</option>\n                    <option value=\"2\">Medium</option>\n                    <option value=\"3\">High</option>\n                </select>\n\n                <button type=\"button\" id=\"createTask\" onClick={(e)=> onCreateTaskClick()}>\n                    Create Task\n                </button> <br/>\n                </div>\n\n                <button type=\"button\" id=\"hide\" onClick={(e)=>props.handleHideCompleted()} >\n                    Hide Completed Tasks\n                </button>\n\n                <button type=\"button\" id=\"clear\" onClick={(e) => props.handleTasksDeleted()} >\n                    Clear Completed Tasks\n                </button> <br/>\n\n            </div>\n\n            <div className={\"listAddDelete\"}>\n            <div className={\"listStuff_row1\"}>\n            <label htmlFor=\"newList\">New List:</label><br/>\n            <input  type = \"text\" id = \"newList\" name=\"newList\"\n                    aria-label=\"Text box for new list entry\"\n                    onKeyPress={(e)=>{onCreateListEnter(e.key)}}\n                    onChange={(event)=>setListNameInput(event.target.value)} value={listNameInput}/>\n            <button type=\"button\" id=\"createList\" onClick={(e)=>onCreateListClick()}> Create List </button> <br/>\n            </div>\n            <button type=\"button\" className={\"showTask\" + showTaskStuff.toString()} id=\"listDelete\" onClick={(e) => props.handleTaskListDeleted()} >\n                Delete this list </button> <br/>\n            </div>\n\n\n\n        </div>\n    }\n    else{\n        return <div className=\"bottom\">\n            <div className={\"showTask\" + showTaskStuff.toString()}>\n                <div className=\"taskStuff_row1\">\n                <label htmlFor=\"newTask\" aria-label = \"text box for new task entry\"> New task:</label><br/>\n                <input  type = \"text\" aria-label = \"text box for new task entry\" id = \"newTask\" name=\"newTask\"\n                        onKeyPress={(e)=>onCreateTaskEnter(e.key)}\n                        onChange={(event)=>setTaskNameInput(event.target.value)} value={taskNameInput}/>\n\n                <select name=\"priorityLvl\" id=\"priorityLvl\" aria-label = \"Set priority for new task\"\n                        onChange={(event)=>setTaskPriorityInput(event.target.value)}>\n                    <option value=\"0\">Select priority</option>\n                    <option value=\"0\">None</option>\n                    <option value=\"1\">Low</option>\n                    <option value=\"2\">Medium</option>\n                    <option value=\"3\">High</option>\n                </select>\n                <button type=\"button\" id=\"createTask\"  onClick={(e)=>onCreateTaskClick()}> Create Task </button> <br/>\n                </div>\n\n                <button type=\"button\" id=\"show\" onClick={(e)=>props.handleHideCompleted()}>\n                    Show Completed Tasks\n                </button>\n                <button type=\"button\" id=\"clear\" onClick={(e) => props.handleTasksDeleted()} >\n                    Clear Completed Tasks </button> <br/>\n            </div>\n\n            <div className={\"listAddDelete\"}>\n            <div className={\"listStuff_row1\"}>\n            <label htmlFor=\"newList\">New List:</label><br/>\n            <input  type = \"text\" id = \"newList\" name=\"newList\"\n                    aria-label=\"Text box for new list entry\"\n                    onChange={(event)=>setListNameInput(event.target.value)} value={listNameInput}/>\n            <button type=\"button\" id=\"createList\" onClick={(e)=>onCreateListClick()}> Create List </button> <br/>\n            </div>\n            <button type=\"button\" className={\"showTask\" + showTaskStuff.toString()} id=\"listDelete\" onClick={(e) => props.handleTasksDeleted()} >\n                Delete this list </button> <br/>\n            </div>\n\n\n        </div>\n    }\n\n}\n\n\nexport default Bottom;","import logo from './logo.svg';\nimport './App.css';\nimport {useState} from \"react\";\nimport TaskList from './TaskList.js';\nimport Top from './Top.js';\nimport Bottom from './Bottom.js';\nimport {useDocument} from \"react-firebase-hooks/firestore\";\n\n\nfunction App(props) {\n\n    let initial = true;\n\n    if(props.currentList === \"wow\"){\n        return (<div className=\"App\">\n            {props.loading && <h1>Loading</h1>}\n            <h1>List of Things to Do</h1>\n            <h5>Select a list or create a new one!</h5>\n            <Top\n                currentList = {props.currentList}\n                taskLists = {props.taskLists}\n                handleTaskListSelect={props.handleTaskListSelect}\n                setSort={props.setSort}\n                sortPriority={props.sortPriority}\n                sortVal={props.sortVal}\n                sortDirection={props.sortDirection}\n                deleteAllTasks = {props.deleteAllTasks}\n                initial = {initial}/>\n            <Bottom\n                showCompletedTask = {props.showCompletedTask}\n                handleTaskListAdded = {props.handleTaskListAdded}\n                handleTaskAdded = {props.handleTaskAdded}\n                initial = {initial}\n            />\n\n        </div>);\n    }\n\n    else if(props.tasks.length === 0){\n        initial = false;\n        return (<div className=\"App\">\n            {props.loading && <h1>Loading</h1>}\n            <h1>List of Things to Do</h1>\n            <Top\n                currentList = {props.currentList}\n                taskLists = {props.taskLists}\n                handleTaskListSelect={props.handleTaskListSelect}\n                setSort={props.setSort}\n                sortPriority={props.sortPriority}\n                sortVal={props.sortVal}\n                sortDirection={props.sortDirection}\n                deleteAllTasks = {props.deleteAllTasks}\n                initial = {initial} />\n\n            <p>Your list has no tasks</p>\n\n            <Bottom\n                showCompletedTask={props.showCompletedTask}\n                handleTaskListAdded = {props.handleTaskListAdded}\n                handleTaskAdded = {props.handleTaskAdded}\n                handleTaskListDeleted={props.handleTaskListDeleted}\n                handleTasksDeleted = {props.handleTasksDeleted}\n                handleHideCompleted={props.handleHideCompleted}\n                initial = {initial}\n            />\n\n        </div>);\n    }\n\n    else{\n        initial = false;\n        const taskCount = props.tasks.length;\n        return(<div className=\"App\">\n            {props.loading && <h1>Loading</h1>}\n            <h1>List of Things to Do</h1>\n            <Top\n                currentList = {props.currentList}\n                taskLists = {props.taskLists}\n                handleTaskListSelect={props.handleTaskListSelect}\n                setSort={props.setSort}\n                sortPriority={props.sortPriority}\n                sortVal={props.sortVal}\n                sortDirection={props.sortDirection}\n                deleteAllTasks = {props.deleteAllTasks}\n                initial = {initial}\n            />\n            <p>Number of tasks: {taskCount + (taskCount===10 && \" (max)\") }</p>\n            <TaskList handleTaskFieldChanged={props.handleTaskFieldChanged}\n                      tasks={props.tasks} /*showCompletedTask={props.showCompletedTask}*/\n                      setSort={props.setSort}\n                      sortPriority={props.sortPriority}\n                      sortDirection={props.sortDirection}\n                      toDelete={props.toDelete}\n                      showCompletedTask={props.showCompletedTask}/><br/>\n            <Bottom\n                showCompletedTask={props.showCompletedTask}\n                handleTaskListAdded = {props.handleTaskListAdded}\n                handleTaskAdded = {props.handleTaskAdded}\n                handleTaskListDeleted={props.handleTaskListDeleted}\n                handleTasksDeleted = {props.handleTasksDeleted}\n                handleHideCompleted={props.handleHideCompleted}\n                initial = {initial}\n\n            />\n        </div>);\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App.js';\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport firebase from \"firebase/compat\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n    authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n    projectId: \"hmc-cs124-fa21-labs\",\n    storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n    messagingSenderId: \"949410042946\",\n    appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst collectionName = \"acowe-tasks-2\"\n\n\nfunction InCloudApp(props) {\n    const query = db.collection(collectionName);\n    const [value, loading, error] = useCollection(query);\n    const [currentList, setCurrentList] = useState(\"wow\");\n\n    const [sortVal, setSortVal] = useState(\"default\");\n    const [sortPriority, setSortPriority] = useState(\"place_order\");\n    const [sortDirection, setSortDirection] = useState('asc');\n\n    const query_2 = db.collection(collectionName).doc(currentList)\n        .collection(currentList + \"_tasks\").orderBy(sortPriority,sortDirection);\n    const [task_value, task_loading, t_error] = useCollection(query_2);\n\n\n    const [showCompletedTask, setShowCompletedTask]=useState(true);\n    const [toDelete, setToDelete]=useState(false);\n    const [maxMessage, setMaxMessage] = useState(\"\");\n    const [orderNum, setOrderNum] = useState(0);\n\n    /*database.collection(collectionName).doc(tasks.).collection('movies').get()*/\n\n    let taskLists = [];\n    let tasks = [];\n    if (value) {\n        taskLists = value.docs.map((doc) => {\n            return {...doc.data()}});\n    }\n\n    console.log(taskLists)\n    if(currentList !== \"wow\" && task_value){\n        tasks = task_value.docs.map((doc)=>{\n            return {...doc.data()}});\n    }\n\n    if(tasks.length !== 0){\n        console.log(tasks[0].task_id);\n    }\n\n\n\n\n    function setSort(sortPref) {\n        setSortVal(sortPref);\n        if (sortPref === \"priorityAsc\"){\n            setSortPriority(\"priority\");\n            setSortDirection(\"asc\");\n        }\n        else if (sortPref === \"priorityDesc\"){\n            setSortPriority(\"priority\");\n            setSortDirection(\"desc\");\n        }\n        else{\n            setSortPriority(\"place_order\");\n            setSortDirection(\"desc\");\n        }\n\n    }\n\n    function handleTaskListAdded(listNameText) {\n        const newListId = generateUniqueID();\n        db.collection(collectionName).doc(newListId).set({\n            list_id: newListId,\n            list_name: listNameText\n        })\n        setCurrentList(newListId);\n    }\n\n    function handleTaskListSelect(listId){\n        console.log(\"input list id: \" + listId);\n        setCurrentList(listId);\n    }\n\n\n\n    function handleTaskAdded(text, priorityNum){\n        if(tasks.length < 10){\n            setMaxMessage(\"\");\n            const newTaskId = generateUniqueID();\n            setOrderNum(orderNum + 1);\n            db.collection(collectionName).doc(currentList)\n                .collection(currentList + \"_tasks\")\n                .doc(newTaskId).set({\n                task_id: newTaskId,\n                task_name: text,\n                completed: false,\n                priority: priorityNum,\n                place_order: orderNum,\n            })\n\n        }\n        else if (tasks.length = 10){\n            setMaxMessage(\"Max number of tasks reached! (You should\" +\n                \" take care of some of the stuff on the list first! :) )\");\n        }\n    }\n\n    function deleteAllTasks(listID){\n        db.collection(collectionName).doc(listID)\n            .collection(\"\" + listID + \"_tasks\")\n            .get()\n            .then(querySnapshot => {\n                querySnapshot.forEach(doc => {\n                    db.collection(collectionName)\n                        .doc(listID)\n                        .collection(\"\" + listID + \"_tasks\").\n                    doc(doc.id).delete();\n                });\n            });\n    }\n\n    function handleTaskListDeleted(){\n        if(taskLists.length > 0){\n            let listToBeDeleted = currentList;\n            if(listToBeDeleted === \"wow\"){\n                console.log(\"A\");\n                console.log(\"Please select a list to be deleted\");\n            }\n            else if(listToBeDeleted === taskLists[0].list_id){\n                if(taskLists.length===1){\n                    setCurrentList(\"wow\");\n                }\n                else{\n                    setCurrentList(taskLists[1].list_id);\n                }\n            }\n            else{\n                setCurrentList(taskLists[0].list_id);\n            }\n            deleteAllTasks(listToBeDeleted);\n            db.collection(collectionName).doc(listToBeDeleted).delete();\n        }\n    }\n\n    function handleTaskFieldChanged(taskId, field, value) {\n        db.collection(collectionName).doc(currentList)\n            .collection(currentList + \"_tasks\").doc(taskId).update(\n            {[field]:value}\n        );\n    }\n\n\n    function getCompleted(){\n        let retArr = [];\n        for (let i=0; i< tasks.length;i++){\n            if(tasks[i].completed){\n                retArr.push(tasks[i].task_id);\n            }\n        }\n        return retArr;\n    }\n\n\n\n    function handleTasksDeleted(){\n        const completedIDs =getCompleted();\n        setToDelete(true);\n        for(let i=0; i< completedIDs.length;i++){\n            db.collection(collectionName)\n                .doc(currentList)\n                .collection(currentList + \"_tasks\")\n                .doc(completedIDs[i]).delete();\n        }\n        setToDelete(false);\n    }\n\n\n\n    /* print all tasks (delete all things in a subcol)*/\n    /*db.collection(collectionName).doc(currentList)\n        .collection(currentList + \"_tasks\")\n        .get()\n        .then(querySnapshot => {\n            querySnapshot.forEach(doc => {\n                console.log(doc.data().task_id);});\n        });*/\n\n\n    return <div>\n        <App loading={loading}\n             taskLists={taskLists}\n             taskLoading = {task_loading}\n             tasks={tasks}\n             currentList = {currentList}\n             showCompletedTask={showCompletedTask}\n             handleHideCompleted={()=>setShowCompletedTask(!showCompletedTask)}\n             handleTaskListAdded ={handleTaskListAdded}\n             handleTaskListSelect = {handleTaskListSelect}\n             handleTaskAdded ={handleTaskAdded}\n             handleTaskFieldChanged = {handleTaskFieldChanged}\n             handleTaskListDeleted={handleTaskListDeleted}\n             handleTasksDeleted={handleTasksDeleted}\n             deleteAllTasks = {deleteAllTasks}\n             setSort={setSort}\n             sortVal={sortVal}\n             toDelete={toDelete}\n             maxMessage={maxMessage}/>\n    </div>\n}\n\n\n/*setData(setDataHelper(id,check))*/\nexport default InCloudApp;\n\n\n\n/*onItemDeleted={handleItemsDeleted} onItemAdded={(text)=>handleItemAdded(text)}\n\n            else return task;}))} data={data}\n        handleConfEdit={(id,editText)=>setData([...data].map(task =>{\n            if(id.includes(task.id)) {\n                return {\n                    ...task,\n                    name: editText\n                }\n            }\n            else return task;}))}\n             showCompletedTask={showCompletedTask}\n             handleHideCompleted={()=>setShowCompletedTask(!showCompletedTask)}*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport InCloudApp from \"./inCloudApp\";\nconst initialData = [{id: 52, name:\"call mom\", completed:false},{id: 53, name:\"eat Book\", completed:false},\n                     {id: 54, name:\"order lunch\", completed:false}];\n\nReactDOM.render(\n  <React.StrictMode>\n    <InCloudApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}