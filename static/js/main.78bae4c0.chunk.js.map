{"version":3,"sources":["logo.svg","Task.js","TaskList.js","Bottom.js","App.js","reportWebVitals.js","InMemoryApp.js","index.js"],"names":["Task","props","edit","editState","show","useState","name","editInput","setEditInput","id","className","completed","toString","type","value","onChange","e","handleCheckChange","target","checked","htmlFor","onClick","handleEditClick","event","handleConfEdit","TaskList","taskToBeEdit","setTaskToBeEdit","handleConfEdit2","text","data","length","listTasks","map","t","includes","showCompletedTask","taskID","Bottom","taskNameInput","setTaskNameInput","onCreateClick","onItemAdded","handleHideCompleted","onItemDeleted","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InMemoryApp","initialData","setData","setShowCompletedTask","itemIDArr","retArr","i","push","getCompleted","filter","item","newTask","handleItemAdded","check","task","editText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78bae4c0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import App from \"./App\";\nimport './Task.css';\nimport {useState} from \"react\";\n\n\n\nfunction Task(props){\n    const edit = props.editState;\n    const show = props.show;\n    const[editInput, setEditInput] = useState(props.name);\n\n    if(edit === 0){\n        return <div id={\"id\"+props.id} className={\"comp\"+props.completed.toString()+\"show\"+show.toString()}>\n            <input type=\"checkbox\" id={\"id\"+props.id}\n                   name={props.name}\n                   value={props.name}\n                   onChange={(e)=>props.handleCheckChange(e.target.id,e.target.checked)}/>\n            <label htmlFor={props.name}> {props.name} </label>\n            <button type=\"button\" id={\"ed\"+props.id}\n                    onClick={(e)=>props.handleEditClick(e.target.id)} className=\"edit\">\n                edit </button>\n        </div>\n    }\n    else if(edit === 1){\n        return <div id={\"id\"+props.id} className={\"comp\"+props.completed.toString()+\"show\"+show.toString()}>\n            <input type=\"checkbox\" id={\"id\"+props.id}\n                   name={props.name}\n                   value={props.name}\n                   onChange={(e)=>props.handleCheckChange(e.target.id,e.target.checked)}/>\n            <input  type = \"text\" id = \"newTask\" name=\"newTask\"\n                    onChange={(event)=>setEditInput(event.target.value)} value={editInput}/>\n            <button type=\"button\" id={\"edc\"+props.id} onClick={(e)=>props.handleConfEdit(e.target.id,editInput)}\n                    className=\"edit\"> confirm edit </button>\n        </div>\n    }\n\n    else{\n        return <div id={\"id\"+props.id} className={\"comp\"+props.completed.toString()+\"show\"+show.toString()}>\n            <input type=\"checkbox\" id={\"id\"+props.id}\n                   name={props.name}\n                   value={props.name}\n                   onChange={(e)=>props.handleCheckChange(e.target.id,e.target.checked)}/>\n            <label htmlFor={props.name}> {props.name} </label>\n        </div>\n    }\n\n}\n\nexport default Task;","import Task from './Task.js'\nimport App from \"./App\";\nimport {useState} from \"react\";\nimport './TaskList.css';\n\nfunction TaskList(props){\n    const[taskToBeEdit, setTaskToBeEdit] = useState(-1);\n\n    function handleConfEdit2(id,text){\n        setTaskToBeEdit(-1);\n        props.handleConfEdit(id,text);\n    }\n\n    if (props.data.length === 0){\n        return <div> Nothing to do!</div>\n    }\n    else{\n        if(taskToBeEdit !== -1){\n            const listTasks = props.data.map((t) =>\n            {if (taskToBeEdit.includes(t.id)) {\n                return <Task handleCheckChange={props.handleCheckChange}\n                             handleConfEdit={handleConfEdit2}\n                             id={t.id} name={t.name} completed={t.completed}\n                             editState={1} show={props.showCompletedTask}/>;\n                }\n            else {\n                return <Task handleCheckChange={props.handleCheckChange} id={t.id} name={t.name} completed={t.completed}\n                             editState={2} show={props.showCompletedTask}/>;\n                }\n            })\n            return <div id={\"TaskList\"}> {listTasks} </div>\n        }\n\n        else{\n            const listTasks = props.data.map((t) =>\n                <Task handleCheckChange={props.handleCheckChange}\n                      handleEditClick={(taskID)=>setTaskToBeEdit(taskID)}\n                      id={t.id} name={t.name} completed={t.completed}\n                      editState={0} show={props.showCompletedTask}/>);\n            return <div id={\"TaskList\"}> {listTasks} </div>\n        }\n\n    }\n}\nexport default TaskList;\n\n","import App from \"./App\";\nimport './Bottom.css';\nimport {useState} from \"react\";\n\nfunction Bottom(props){\n    const[taskNameInput, setTaskNameInput] = useState(null);\n\n    function onCreateClick(){\n        props.onItemAdded(taskNameInput);\n        setTaskNameInput(\"\");\n    }\n\n    if (props.showCompletedTask){\n        return <div className=\"bottom\">\n            New task:<br/>\n            <input  type = \"text\" id = \"newTask\" name=\"newTask\"\n                    onChange={(event)=>setTaskNameInput(event.target.value)}\n                    value={taskNameInput}/>\n\n            <button type=\"button\" id=\"create\" onClick={(e)=>onCreateClick()}>\n                Create Task\n            </button> <br/>\n\n            <button type=\"button\" id=\"hide\" onClick={(e)=>props.handleHideCompleted()} >\n                Hide Completed Tasks\n            </button>\n\n            <button type=\"button\" id=\"clear\" onClick={(e) => props.onItemDeleted()} >\n                Clear Completed Tasks\n            </button>\n\n        </div>\n    }\n    else{\n        return <div className=\"bottom\">\n            New task:<br/>\n            <input  type = \"text\" id = \"newTask\" name=\"newTask\"\n                    onChange={(event)=>setTaskNameInput(event.target.value)} value={taskNameInput}/>\n            <button type=\"button\" id=\"create\" onClick={(e)=>onCreateClick()}> Create Task </button> <br/>\n            <button type=\"button\" id=\"show\" onClick={(e)=>props.handleHideCompleted()} >\n                Show Completed Tasks\n            </button>\n            <button type=\"button\" id=\"clear\" onClick={(e) => props.onItemDeleted()} >\n                Clear Completed Tasks </button>\n        </div>\n    }\n\n}\n\nexport default Bottom;","import logo from './logo.svg';\nimport './App.css';\nimport TaskList from './TaskList.js';\nimport Bottom from './Bottom.js';\n\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <h1>List of Things to Do</h1>\n        <TaskList handleCheckChange={props.handleCheckChange} handleConfEdit={props.handleConfEdit}\n                  data={props.data} showCompletedTask={props.showCompletedTask}/> <br/>\n        <Bottom onItemDeleted={props.onItemDeleted} onItemAdded={props.onItemAdded}\n                handleHideCompleted={props.handleHideCompleted} showCompletedTask={props.showCompletedTask}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App.js';\nimport {useState} from \"react\";\n\n\nfunction InMemoryApp(props) {\n    const [data,setData] = useState(props.initialData)\n    const [showCompletedTask, setShowCompletedTask]=useState(true);\n\n    function idCount(){\n        if(data.length==0){\n            return 1;\n        }\n        else{\n            return data[data.length-1].id + 1;\n        }\n    }\n\n    function getCompleted(){\n        let retArr = [];\n        for (let i=0; i< data.length;i++){\n            if(data[i].completed){\n                retArr.push(data[i].id);\n            }\n        }\n        return retArr;\n    }\n\n    function handleItemsDeleted(){\n        const itemIDArr = getCompleted();\n        setData(data.filter(item => !itemIDArr.includes(item.id)));\n    }\n\n    function handleItemAdded(text){\n        if(text !== null && text !== \"\"){\n            const newTask = {id:idCount() , name:text, completed:false};\n            setData([...data, newTask]);\n        }\n    }\n\n    return <div>\n        <App onItemDeleted={handleItemsDeleted} onItemAdded={(text)=>handleItemAdded(text)}\n             handleCheckChange={(id,check)=>setData([...data].map(task =>{\n            if(id.includes(task.id)) {\n                return {\n                    ...task,\n                    completed: check\n                }\n            }\n            else return task;}))} data={data}\n        handleConfEdit={(id,editText)=>setData([...data].map(task =>{\n            if(id.includes(task.id)) {\n                return {\n                    ...task,\n                    name: editText\n                }\n            }\n            else return task;}))}\n             showCompletedTask={showCompletedTask}\n             handleHideCompleted={()=>setShowCompletedTask(!showCompletedTask)}/>\n    </div>\n}\n\n/*setData(setDataHelper(id,check))*/\nexport default InMemoryApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport InMemoryApp from \"./InMemoryApp\";\nconst initialData = [{id: 52, name:\"call mom\", completed:false},{id: 53, name:\"eat Book\", completed:false},\n                     {id: 54, name:\"order lunch\", completed:false}];\n\nReactDOM.render(\n  <React.StrictMode>\n    <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}