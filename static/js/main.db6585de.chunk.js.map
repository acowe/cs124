{"version":3,"sources":["logo.svg","Task.js","TaskList.js","Bottom.js","DataManager.js","App.js","reportWebVitals.js","InMemoryApp.js","index.js"],"names":["Task","props","id","type","name","value","checked","completed","htmlFor","className","TaskList","data","length","listTasks","map","t","Bottom","DataManager","useState","inputData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InMemoryApp","initialData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAAe,I,kBCWAA,MARf,SAAcC,GACV,OAAO,sBAAKC,GAAI,KAAKD,EAAMC,GAApB,UACH,uBAAOC,KAAK,WAAWD,GAAI,KAAKD,EAAMC,GAAIE,KAAK,SAASC,MAAOJ,EAAMG,KAAME,QAASL,EAAMM,YAC1F,wBAAOC,QAASP,EAAMG,KAAtB,cAA+BH,EAAMG,KAArC,OACA,wBAAQD,KAAK,SAASM,UAAU,OAAhC,wB,MCSOC,MAZf,SAAkBT,GACd,GAA0B,IAAtBA,EAAMU,KAAKC,OACX,OAAO,kDAGP,IAAMC,EAAYZ,EAAMU,KAAKG,KAAI,SAACC,GAAD,OAC7B,cAAC,EAAD,CAAMb,GAAIa,EAAEb,GAAIE,KAAMW,EAAEX,KAAMG,UAAWQ,EAAER,eAC/C,OAAO,qBAAKL,GAAI,WAAT,SACFW,K,MCCEG,MAVf,WACI,OAAO,sBAAKP,UAAU,SAAf,sBACM,uBACT,uBAAON,KAAO,OAAOD,GAAK,UAAUE,KAAK,YACzC,wBAAQD,KAAK,SAAb,2BAHG,IAG0C,uBAC7C,wBAAQA,KAAK,SAAb,oCACA,wBAAQA,KAAK,SAAb,yC,OCEOc,MATf,SAAqBhB,GACjB,MAAwBiB,mBAASjB,EAAMkB,WAAvC,mBAAOR,EAAP,KACA,OADA,KACOA,GCYIS,MAVf,WACE,OACE,sBAAKX,UAAU,MAAf,UACE,sDACE,cAAC,EAAD,CAAUE,KAAM,cAAC,EAAD,MAChB,cAAC,EAAD,QCCOU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDCQ,MAJf,SAAqB7B,GACjB,OAAO,cAAC,EAAD,CAAKU,KAAMV,EAAM8B,eCK5BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAaH,YAJG,CAAC,CAAC7B,GAAI,GAAIE,KAAK,WAAYG,WAAU,GAAM,CAACL,GAAI,GAAIE,KAAK,WAAYG,WAAU,QAMjG4B,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.db6585de.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import App from \"./App\";\nimport './Task.css';\n\nfunction Task(props){\n    return <div id={\"id\"+props.id}>\n        <input type=\"checkbox\" id={\"cb\"+props.id} name=\"potato\" value={props.name} checked={props.completed}/>\n        <label htmlFor={props.name} > {props.name} </label>\n        <button type=\"button\" className=\"edit\"> edit </button>\n    </div>\n}\n\nexport default Task;","import Task from './Task.js'\nimport App from \"./App\";\nimport './TaskList.css';\n\nfunction TaskList(props){\n    if (props.data.length === 0){\n        return <div> Nothing to do!</div>\n    }\n    else{\n        const listTasks = props.data.map((t) =>\n            <Task id={t.id} name={t.name} completed={t.completed}/>);\n        return <div id={\"TaskList\"}>\n            {listTasks}\n        </div>\n    }\n}\nexport default TaskList;\n\n","import App from \"./App\";\nimport './Bottom.css';\n\nfunction Bottom(){\n    return <div className=\"bottom\">\n        New task:<br/>\n        <input type = \"text\" id = \"newTask\" name=\"newTask\"/>\n        <button type=\"button\"> Create Task </button> <br/>\n        <button type=\"button\"> Hide Completed Tasks </button>\n        <button type=\"button\"> Clear Completed Tasks </button>\n    </div>\n}\n\nexport default Bottom;","import React, { useState } from 'react';\n\nfunction DataManager(props){\n    const [data, setData] = useState(props.inputData);\n    return data;\n\n}\n/*function setData(field, value) {\n    setTask({...task, [field]: value});\n}*/\n\nexport default DataManager;","import logo from './logo.svg';\nimport './App.css';\nimport TaskList from './TaskList.js';\nimport Bottom from './Bottom.js';\nimport DataManager from \"./DataManager\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>List of Things to Do</h1>\n        <TaskList data={<DataManager/>}/>\n        <Bottom/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App.js';\n\nfunction InMemoryApp(props) {\n    return <App data={props.initialData}/>\n}\n\nexport default InMemoryApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport InMemoryApp from \"./InMemoryApp\";\nconst initialData = [{id: 52, name:\"call mom\", completed:true},{id: 94, name:\"buy book\", completed:false}];\n\nReactDOM.render(\n  <React.StrictMode>\n    <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}